/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as GuestImport } from './routes/_guest'
import { Route as AuthedImport } from './routes/_authed'
import { Route as GuestResetPasswordImport } from './routes/_guest/reset-password'
import { Route as GuestLoginImport } from './routes/_guest/login'
import { Route as GuestForgotPasswordImport } from './routes/_guest/forgot-password'
import { Route as AuthedSettingsIndexImport } from './routes/_authed/settings/index'
import { Route as AuthedSettingsUsersImport } from './routes/_authed/settings/users'
import { Route as AuthedSettingsRolesImport } from './routes/_authed/settings/roles'

// Create Virtual Routes

const AuthedIndexLazyImport = createFileRoute('/_authed/')()

// Create/Update Routes

const GuestRoute = GuestImport.update({
  id: '/_guest',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedIndexLazyRoute = AuthedIndexLazyImport.update({
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any).lazy(() => import('./routes/_authed/index.lazy').then((d) => d.Route))

const GuestResetPasswordRoute = GuestResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => GuestRoute,
} as any)

const GuestLoginRoute = GuestLoginImport.update({
  path: '/login',
  getParentRoute: () => GuestRoute,
} as any)

const GuestForgotPasswordRoute = GuestForgotPasswordImport.update({
  path: '/forgot-password',
  getParentRoute: () => GuestRoute,
} as any)

const AuthedSettingsIndexRoute = AuthedSettingsIndexImport.update({
  path: '/settings/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSettingsUsersRoute = AuthedSettingsUsersImport.update({
  path: '/settings/users',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSettingsRolesRoute = AuthedSettingsRolesImport.update({
  path: '/settings/roles',
  getParentRoute: () => AuthedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_guest': {
      id: '/_guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuestImport
      parentRoute: typeof rootRoute
    }
    '/_guest/forgot-password': {
      id: '/_guest/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof GuestForgotPasswordImport
      parentRoute: typeof GuestImport
    }
    '/_guest/login': {
      id: '/_guest/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof GuestLoginImport
      parentRoute: typeof GuestImport
    }
    '/_guest/reset-password': {
      id: '/_guest/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof GuestResetPasswordImport
      parentRoute: typeof GuestImport
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexLazyImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/settings/roles': {
      id: '/_authed/settings/roles'
      path: '/settings/roles'
      fullPath: '/settings/roles'
      preLoaderRoute: typeof AuthedSettingsRolesImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/settings/users': {
      id: '/_authed/settings/users'
      path: '/settings/users'
      fullPath: '/settings/users'
      preLoaderRoute: typeof AuthedSettingsUsersImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/settings/': {
      id: '/_authed/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthedSettingsIndexImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedIndexLazyRoute: typeof AuthedIndexLazyRoute
  AuthedSettingsRolesRoute: typeof AuthedSettingsRolesRoute
  AuthedSettingsUsersRoute: typeof AuthedSettingsUsersRoute
  AuthedSettingsIndexRoute: typeof AuthedSettingsIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedIndexLazyRoute: AuthedIndexLazyRoute,
  AuthedSettingsRolesRoute: AuthedSettingsRolesRoute,
  AuthedSettingsUsersRoute: AuthedSettingsUsersRoute,
  AuthedSettingsIndexRoute: AuthedSettingsIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

interface GuestRouteChildren {
  GuestForgotPasswordRoute: typeof GuestForgotPasswordRoute
  GuestLoginRoute: typeof GuestLoginRoute
  GuestResetPasswordRoute: typeof GuestResetPasswordRoute
}

const GuestRouteChildren: GuestRouteChildren = {
  GuestForgotPasswordRoute: GuestForgotPasswordRoute,
  GuestLoginRoute: GuestLoginRoute,
  GuestResetPasswordRoute: GuestResetPasswordRoute,
}

const GuestRouteWithChildren = GuestRoute._addFileChildren(GuestRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof GuestRouteWithChildren
  '/forgot-password': typeof GuestForgotPasswordRoute
  '/login': typeof GuestLoginRoute
  '/reset-password': typeof GuestResetPasswordRoute
  '/': typeof AuthedIndexLazyRoute
  '/settings/roles': typeof AuthedSettingsRolesRoute
  '/settings/users': typeof AuthedSettingsUsersRoute
  '/settings': typeof AuthedSettingsIndexRoute
}

export interface FileRoutesByTo {
  '': typeof GuestRouteWithChildren
  '/forgot-password': typeof GuestForgotPasswordRoute
  '/login': typeof GuestLoginRoute
  '/reset-password': typeof GuestResetPasswordRoute
  '/': typeof AuthedIndexLazyRoute
  '/settings/roles': typeof AuthedSettingsRolesRoute
  '/settings/users': typeof AuthedSettingsUsersRoute
  '/settings': typeof AuthedSettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_guest': typeof GuestRouteWithChildren
  '/_guest/forgot-password': typeof GuestForgotPasswordRoute
  '/_guest/login': typeof GuestLoginRoute
  '/_guest/reset-password': typeof GuestResetPasswordRoute
  '/_authed/': typeof AuthedIndexLazyRoute
  '/_authed/settings/roles': typeof AuthedSettingsRolesRoute
  '/_authed/settings/users': typeof AuthedSettingsUsersRoute
  '/_authed/settings/': typeof AuthedSettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/'
    | '/settings/roles'
    | '/settings/users'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/'
    | '/settings/roles'
    | '/settings/users'
    | '/settings'
  id:
    | '__root__'
    | '/_authed'
    | '/_guest'
    | '/_guest/forgot-password'
    | '/_guest/login'
    | '/_guest/reset-password'
    | '/_authed/'
    | '/_authed/settings/roles'
    | '/_authed/settings/users'
    | '/_authed/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  GuestRoute: typeof GuestRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  GuestRoute: GuestRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/_guest"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/",
        "/_authed/settings/roles",
        "/_authed/settings/users",
        "/_authed/settings/"
      ]
    },
    "/_guest": {
      "filePath": "_guest.tsx",
      "children": [
        "/_guest/forgot-password",
        "/_guest/login",
        "/_guest/reset-password"
      ]
    },
    "/_guest/forgot-password": {
      "filePath": "_guest/forgot-password.tsx",
      "parent": "/_guest"
    },
    "/_guest/login": {
      "filePath": "_guest/login.tsx",
      "parent": "/_guest"
    },
    "/_guest/reset-password": {
      "filePath": "_guest/reset-password.tsx",
      "parent": "/_guest"
    },
    "/_authed/": {
      "filePath": "_authed/index.lazy.tsx",
      "parent": "/_authed"
    },
    "/_authed/settings/roles": {
      "filePath": "_authed/settings/roles.tsx",
      "parent": "/_authed"
    },
    "/_authed/settings/users": {
      "filePath": "_authed/settings/users.tsx",
      "parent": "/_authed"
    },
    "/_authed/settings/": {
      "filePath": "_authed/settings/index.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
